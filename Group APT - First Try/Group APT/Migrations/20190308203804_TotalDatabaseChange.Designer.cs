// <auto-generated />
using System;
using Group_APT.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Group_APT.Migrations
{
    [DbContext(typeof(ExaminationContext))]
    [Migration("20190308203804_TotalDatabaseChange")]
    partial class TotalDatabaseChange
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Group_APT.Models.Department", b =>
                {
                    b.Property<string>("DepartmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DepartmentName");

                    b.HasKey("DepartmentId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Group_APT.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("ExamMark");

                    b.Property<int>("FinalAssessment");

                    b.Property<int>("SeatNumber");

                    b.Property<int>("SessionStatus");

                    b.Property<string>("SubjectCode")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("EnrollmentId");

                    b.HasIndex("SubjectCode");

                    b.HasIndex("UserId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("Group_APT.Models.Examination", b =>
                {
                    b.Property<string>("Paper_Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Location_Id");

                    b.Property<int>("QuestionAmount");

                    b.Property<string>("SelectionType");

                    b.Property<DateTime>("Time");

                    b.HasKey("Paper_Id");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("Group_APT.Models.Lecturer", b =>
                {
                    b.Property<string>("UniversityLecturerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LecturerId");

                    b.Property<string>("Name");

                    b.Property<string>("Surname");

                    b.HasKey("UniversityLecturerId");

                    b.ToTable("Lecturers");
                });

            modelBuilder.Entity("Group_APT.Models.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FacialImage");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Group_APT.Models.Subject", b =>
                {
                    b.Property<string>("SubjectCode")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Credits")
                        .IsRequired();

                    b.Property<string>("DepartmentId")
                        .IsRequired();

                    b.Property<string>("SubjectName")
                        .IsRequired();

                    b.HasKey("SubjectCode");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Group_APT.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DepartmentId")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Surname")
                        .IsRequired();

                    b.Property<string>("UserType")
                        .IsRequired();

                    b.HasKey("UserId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Group_APT.Models.Enrollment", b =>
                {
                    b.HasOne("Group_APT.Models.Subject", "RelatedSubject")
                        .WithMany()
                        .HasForeignKey("SubjectCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Group_APT.Models.Student", "RelatedStudent")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group_APT.Models.Student", b =>
                {
                    b.HasOne("Group_APT.Models.User", "RelatedUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group_APT.Models.Subject", b =>
                {
                    b.HasOne("Group_APT.Models.Department", "RelatedDepartment")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group_APT.Models.User", b =>
                {
                    b.HasOne("Group_APT.Models.Department", "RelatedDepartment")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
